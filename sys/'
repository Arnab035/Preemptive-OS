/************   definition of the first task with process 0 pid ************/

#include <sys/start.h>

/* important notes : init  process is the child of idle process(0) - the idle process will be statically allocated.. init would of course copy everything barring files and mm from the idle process like a normal fork */

void start_kernel()
{
  struct pcb *init;
  console_init();   // clears console
  kprintf("!!!*** Welcome to BLEH OS ***!!!");

  disable_all_interrupts();

  /** all initializations should follow **/
  init_idt();
  initialize();

  define_free_list((uint64_t *)(uint64_t)loader_stack[4], (uint64_t *)0x6000000);
  init_setup_virtual_memory();

  kprintf("assigned cr3 values and vgamemory is rebased\n");
  init_syscall(0x28, 0x8);   // user cs, kernel cs

  /* other initializations */
  tarfs_init();
  scheduler_init();  // create idle task
  
  final_init();

  kprintf("syscalls initialized\n");
}

void final_init()
{
  // create the kernel thread init with pid = 1
  kernel_thread(kernel_init, NULL);
}

int kernel_init()
{
  int ret = run_init_process("/bin/init");

  if(ret)
  {
    kprintf("something is wrong with /bin/init");
  }
  return ret;  // should not return 
}

int run_init_process(const char *filename)
{
  const char *name = getname_kernel(filename);
  const char *argv_init = {name, "init", NULL};
  const char *envp_init = {"HOME=/", NULL}
  
  return do_execve(name, argv_init, envp_init);
}

/* create a kernel thread - kernel threads do not copy/involve with vmas */

void kernel_thread(int (*fn)(), void *arg)
{
  do_fork(CLONE_VM|CLONE_FS, (unsigned long)fn, (unsigned long)arg);  // CLONE_VM means do not copy vmas
}

